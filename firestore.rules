rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    // Users can read any profile, but only write to their own.
    // This is needed for signup and profile updates.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Authenticated users can read and create teams, tournaments, and various requests.
    // Critical updates (approving, deleting) should be handled by Cloud Functions.
    match /teams/{teamId} {
      allow read, create: if isAuthenticated();
      allow update: if isAuthenticated() && request.auth.uid == resource.data.ownerId;
    }

    match /tournaments/{tournamentId} {
      allow read, create: if isAuthenticated();
    }
    
    match /friendRequests/{requestId} {
        allow read, create: if isAuthenticated();
    }
    
    match /teamApplications/{applicationId} {
        allow read, create: if isAuthenticated();
    }
    
    match /supportTickets/{ticketId} {
        allow read, create: if isAuthenticated();
    }
    
    // Chats are restricted to members of the chat.
    match /chats/{chatId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.members;

      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
      }
    }
  }
}
