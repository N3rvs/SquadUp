rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function
    function isAuthenticated() {
      return request.auth != null;
    }

    // USERS
    match /users/{userId} {
      // Any authenticated user can view profiles, which is needed for social features.
      allow read, list: if isAuthenticated();
      // Any authenticated user can create their own user document during sign-up.
      allow create: if isAuthenticated();
      // Only the user themselves or an admin can update their profile.
      allow update: if isAuthenticated() && (request.auth.uid == userId ||
                       request.auth.token.admin == true);
    }

    // TEAMS
    match /teams/{teamId} {
      allow read: if isAuthenticated();
      // Team creation is restricted to founders, admins, or moderators.
      allow create: if isAuthenticated() && 
                       (request.auth.token.admin == true || 
                        request.auth.token.moderator == true ||
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryRole == 'fundador');
      // Only the team owner or an admin/moderator can update team details.
      allow update: if isAuthenticated() &&
                       (resource.data.ownerId == request.auth.uid ||
                        request.auth.token.admin == true ||
                        request.auth.token.moderator == true);
      // Only the team owner or an admin can delete a team.
      allow delete: if isAuthenticated() &&
                       (resource.data.ownerId == request.auth.uid ||
                        request.auth.token.admin == true);
    }

    // TEAM APPLICATIONS & INVITES
    match /teamApplications/{applicationId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if isAuthenticated() && 
                                     (request.auth.uid == resource.data.userId || 
                                      request.auth.uid == resource.data.teamOwnerId || 
                                      request.auth.token.admin == true ||
                                      request.auth.token.moderator == true);
    }
    
    // FRIEND REQUESTS
    match /friendRequests/{requestId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if isAuthenticated() &&
                                     (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
    }

    // CHATS
    match /chats/{chatId} {
      // Members of a chat can read/write the chat document
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.members;

      // Messages can be read by chat members, created by the sender
      match /messages/{messageId} {
        allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.senderId && 
                       request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
      }
    }

    // TOURNAMENTS
    match /tournaments/{tournamentId} {
       allow read: if isAuthenticated();
       allow create: if isAuthenticated();
       allow update, delete: if request.auth.token.admin == true || request.auth.token.moderator == true;
    }

    // SUPPORT TICKETS
    match /supportTickets/{ticketId} {
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth.token.admin == true || request.auth.token.moderator == true;
    }
  }
}
